# The name of your workflow. GitHub displays the names of your workflows on your repository's "Actions" tab
name: Rust

# To automatically trigger the workflow
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.7.3
  SQLX_FEATURES: "rustls,postgres"

# A workflow run is made up of one or more jobs, which run in parallel by default
# Each job runs in a runner environment specified by runs-on
jobs:
  # `fmt` container job
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Specific to dtolnay/rust-toolchain: Comma-separated string of additional components to install
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  # `clippy` container job
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: rui314/setup-mold@v1
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Linting
        run: cargo clippy -- -D warnings

  # `test` container job
  test:
    name: cargo test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install the Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install the mold linker
        uses: rui314/setup-mold@v1

      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        run:
            cargo install sqlx-cli
            --version=${{ env.SQLX_VERSION }}
            --features ${{ env.SQLX_FEATURES }}
            --no-default-features
            --locked

      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run tests
        run: cargo test

  # `coverage` container job
  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Generate code coverage
        run: cargo install cargo-tarpaulin && cargo tarpaulin --verbose --workspace
